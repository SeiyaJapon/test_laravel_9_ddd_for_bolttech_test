<?php

declare(strict_types=1);

namespace Tests\Functional\Auth;

use App\Models\User;
use DDD\Domain\RegisterType;
use Faker\Factory;
use Illuminate\Http\Response;
use Tests\TestCase;

class RegisterTest extends TestCase
{
    private const URL = 'api/auth/register';
    private const USER_CREATED_REGISTER_SUCCESS = 'User created. Register Success';

    private string $email;
    private string $password;

    public function setUp(): void
    {
        parent::setUp();

        $faker = Factory::create();

        $this->email = $faker->email;
        $this->password = $faker->password;
    }

    public function testRegister()
    {
        $payload = [
            'email' => $this->email,
            'password' => $this->password,
            'password_confirmation' => $this->password
        ];

        $this->post(self::URL, $payload)
            ->assertCreated()
            ->assertJson(['message' => self::USER_CREATED_REGISTER_SUCCESS]);
    }

    public function testRegisterNoEmail()
    {
        $payload = [
            'password' => $this->password,
            'password_confirmation' => $this->password
        ];

        $this->json('post', self::URL, $payload)
            ->assertStatus(Response::HTTP_BAD_REQUEST);
    }

    public function testRegisterNoPassword()
    {
        $payload = [
            'email' => $this->email,
            'password_confirmation' => $this->password
        ];

        $this->json('post', self::URL, $payload)
            ->assertStatus(Response::HTTP_BAD_REQUEST);
    }

    public function testRegisterNoPasswordConfirmation()
    {
        $payload = [
            'email' => $this->email,
            'password' => $this->password
        ];

        $this->json('post', self::URL, $payload)
            ->assertStatus(Response::HTTP_BAD_REQUEST);
    }

    public function testRegisterDifferentPasswordConfirmation()
    {
        $payload = [
            'email' => $this->email,
            'password' => $this->password,
            'password_confirmation' => 'different'
        ];

        $this->json('post', self::URL, $payload)
            ->assertStatus(Response::HTTP_BAD_REQUEST);
    }

    protected function tearDown(): void
    {
        if ($user = User::where('email', $this->email)->first()) {
            $user->forceDelete();
        }

        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
